@page
@{
    ViewData["Title"] = "API";
}
<h1>@ViewData["Title"]</h1>

<h3>Available API's</h3>
<p>You can use the REST API's below to retrieve details or execute commands.</p>
<p>
    The API's invoked with an HTTP POST expect a JSON body containing the specified parameters.
    Every POST API also supports an additional <code>callChainUrls</code> parameter containing a list
    of space-separated URL's for <a href="call-chaining">call chaining</a>.
</p>

<table class="table table-striped table-hover table-sm table-responsive mt-3">
    <thead>
        <tr>
            <th>Method</th>
            <th>Path</th>
            <th>Parameters</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>GET</td>
            <td><a asp-controller="Api" asp-action="Introspector">@Url.Action("Introspector", "Api")</a></td>
            <td></td>
            <td>Returns all information from the inspector as a single response.</td>
        </tr>
        <tr>
            <td>GET</td>
            <td>@Url.Action("Introspector", "Api", new { Group = "_group_" }).Replace("_group_", "<group>")</td>
            <td></td>
            <td>
                Returns only a single group (subset) of information from the inspector, e.g. only the
                <a asp-controller="Api" asp-action="Introspector" asp-route-group="Request">Request</a> group.
                Available groups: @foreach (var group in InspectorGroup.AllGroups) { <text><code>@group.Key</code></text> @if (group != InspectorGroup.AllGroups.Last()) { <text>, </text> } }.

            </td>
        </tr>
        <tr>
            <td>GET</td>
            <td>@Url.Action("Introspector", "Api", new { Group = "_group_", Key = "_key_" }).Replace("_group_", "<group>").Replace("_key_", "<key>")</td>
            <td></td>
            <td>
                Returns the value of only a single key (and only the first if there are multiple values) from the inspector,
                e.g. only the <a asp-controller="Api" asp-action="Introspector" asp-route-group="Request" asp-route-key="request-url">Request URL</a> part.
                See above for all available groups, and see the <a asp-controller="Api" asp-action="Introspector">full inspector document</a> for all available keys.
            </td>
        </tr>
        <tr>
            <td>POST</td>
            <td><a asp-controller="Api" asp-action="Introspector">@Url.Action("Introspector", "Api")</a></td>
            <td><code>group</code>, <code>key</code></td>
            <td>Returns the requested information from the inspector (see above for <code>group</code> and <code>key</code> details).</td>
        </tr>
        <tr>
            <td>POST</td>
            <td><a asp-controller="Api" asp-action="DnsLookup">@Url.Action("DnsLookup", "Api")</a></td>
            <td><code>host</code></td>
            <td>Returns the results of a DNS lookup of the specified host name (or IP address).</td>
        </tr>
        <tr>
            <td>POST</td>
            <td><a asp-controller="Api" asp-action="HttpRequest">@Url.Action("HttpRequest", "Api")</a></td>
            <td><code>requestUrl</code>, <code>requestHostName</code></td>
            <td>Returns the results of an HTTP request for the specified URL (with an optional host name override).</td>
        </tr>
        <tr>
            <td>POST</td>
            <td><a asp-controller="Api" asp-action="SqlConnection">@Url.Action("SqlConnection", "Api")</a></td>
            <td><code>sqlConnectionString</code>, <code>sqlQuery</code></td>
            <td>Returns the results of the specified (scalar) SQL query against a given SQL database connection string.</td>
        </tr>
        <tr>
            <td>POST</td>
            <td><a asp-controller="Api" asp-action="AzureManagedIdentity">@Url.Action("AzureManagedIdentity", "Api")</a></td>
            <td><code>resource</code></td>
            <td>Returns an access token for the specified resource on behalf of the <a href="https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview" target="_blank">managed identity representing your application</a> (when running on a supported Azure service).</td>
        </tr>
    </tbody>
</table>

<a name="call-chaining"></a>
<h3>Call Chaining</h3>

<p>
    The main purpose for these API's is so that you can perform call chains of requests from one deployed instance of the application
    to one or more other instances. This makes it easy to set up a multi-tier test environment (e.g. on Kubernetes or other
    microservice platforms) and perform queries across multiple hops.
</p>
<p>
    Imagine for example that you deploy a Kubernetes cluster with 4 pods, each of these running the exact same Inspector Gadget container.
    You can then add an <a asp-page="/Index" asp-fragment="Configuration">info message</a> or environment variable like <code>tier</code>
    to each pod indicating which tier they logically represent, e.g. <code>front-end</code>, <code>api-gateway</code>, <code>api-1</code>
    and <code>api-2</code>. With that configuration in place, you can then perform a call chain to hop from the <code>front-end</code>
    to the <code>api-gateway</code> and from there to <code>api-1</code>.
</p>
<p>
    For example, to validate that the tiers are able to reach each other (e.g. if you've deployed network policies or when you're using a service mesh),
    you can browse to the Inspector Gadget web page on the <code>front-end</code>, and from there perform an <a asp-page="/Introspector">Introspector</a>
    request by setting the &quot;Call Chain&quot; to &quot;<code class="text-nowrap">http://api-gateway http://api-1</code>&quot; (if those would be the
    URL's of the other pods of course). If you set the requested &quot;Group&quot; to <code>Environment</code> and the &quot;Key&quot; to <code>tier</code>
    (or whatever environment variable you picked), then you can see the simple value returned by each hop to show which tier it represents.
</p>
<p>
    Note that this would work even if only the <code>front-end</code> is exposed externally, with the other tiers only accessible from within the cluster,
    because each call in the chain is done from the previous hop.
</p>